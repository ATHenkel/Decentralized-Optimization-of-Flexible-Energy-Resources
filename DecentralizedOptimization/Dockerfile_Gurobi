# Verwende ein 64-Bit-Basis-Image für ARM-basierte Java-Anwendungen
FROM --platform=linux/arm64 arm64v8/openjdk:11-jdk-slim

# Erstelle das Verzeichnis für die Gurobi-Lizenz und die Bibliotheken
RUN mkdir -p /opt/gurobi

# Kopiere die Gurobi-Lizenzdatei
COPY in/gurobi.lic /opt/gurobi/gurobi.lic

# Setze den Pfad zur Lizenzdatei
ENV GRB_LICENSE_FILE="/opt/gurobi/gurobi.lic"

# Kopiere die Gurobi-Dateien (JAR und .so-Dateien)
COPY in/gurobi.jar /opt/gurobi/
COPY in/libgurobi.so.11.0.3 /opt/gurobi/lib/
COPY in/libGurobiJni110.so /opt/gurobi/lib/

# Erstelle eine symbolische Verknüpfung für libgurobi110.so
RUN ln -s /opt/gurobi/lib/libgurobi.so.11.0.3 /opt/gurobi/lib/libgurobi110.so

# Setze den Pfad für die Bibliotheken
ENV LD_LIBRARY_PATH="/opt/gurobi/lib:$LD_LIBRARY_PATH"

# Erstelle das Arbeitsverzeichnis
WORKDIR /JavaApp

# Kopiere die Java-Klasse und die Gurobi-JAR-Datei
COPY src/main/java/CentralizedOptimization/OptimizationModel_Gurobi.java /JavaApp/src/CentralizedOptimization/
COPY in/gurobi.jar /JavaApp/libs/

# Kopiere alle anderen Bibliotheken
COPY target/libs /JavaApp/libs/

# Kompiliere die Klasse SimpleGurobiExample.java
RUN mkdir -p /JavaApp/bin && \
    javac -cp "/JavaApp/libs/gurobi.jar:/JavaApp/libs/*" -d /JavaApp/bin /JavaApp/src/CentralizedOptimization/OptimizationModel_Gurobi.java

# Setze das Arbeitsverzeichnis auf das "bin"-Verzeichnis
WORKDIR /JavaApp/bin

# Starte die Java-Anwendung
CMD ["java", "-Djava.library.path=/opt/gurobi/lib", "-cp", ".:/JavaApp/libs/*", "CentralizedOptimization.OptimizationModel_Gurobi"]
